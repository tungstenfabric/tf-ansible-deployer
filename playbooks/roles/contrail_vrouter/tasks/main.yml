---
- name: "create /etc/contrail/vrouter"
  file:
    path: /etc/contrail/vrouter
    state: directory
    recurse: yes

- name: "get pop"
  set_fact:
    location: "{{ roles[instance_name].vrouter.location }}"
  when: roles[instance_name].vrouter.location is defined

- name: "init pop control peer list"
  set_fact:
    pop_control_list: []
  when: location is defined

- name: "add pop control nodes to list"
  set_fact:
    pop_control_list: "{{ pop_control_list + [ instances[item.key].ip ] }}"
  when: location is defined and item.value.control is defined and item.value.control.location is defined and item.value.control.location == location
  with_dict: "{{ roles }}"
  ignore_errors: yes

- name: "create controler host list if not defined"
  set_fact:
    pop_control_nodes: "{{ pop_control_list|join(',') }}"
  when: pop_control_list is defined

- name: "create contrail_configuration.CONTROL_NODES"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CONTROL_NODES': pop_control_nodes}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.CONTROL_NODES is undefined

- name: "set DNS servers if location is defined"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'DNS_NODES': contrail_configuration.DNS_NODES|default(contrail_configuration.CONTROLLER_NODES)}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.DNS_NODES is undefined

- name: populate common_vrouter.env
  template:
    src: common_vrouter.env.j2
    dest: /etc/contrail/common_vrouter.env
    mode: "0640"

- name: "populate pop settings"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ remote_locations[location] }}"
  when: location is defined

- name: "add kubemanager token to common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^K8S_TOKEN=.*' line="K8S_TOKEN={{ hostvars[k8s_master_name].kubemanagertoken }}" state=present
  when: k8s_master_name is defined and hostvars[k8s_master_name].kubemanagertoken is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is defined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ remote_locations[location].SUBCLUSTER }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is undefined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ location }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is undefined

- name: set vrouter kernel init image name
  set_fact:
    vrouter_kernel_init_img_name: contrail-vrouter-kernel-build-init
  when: ansible_os_family == 'Debian'

- name: set vrouter kernel init image name
  set_fact:
    vrouter_kernel_init_img_name: contrail-vrouter-kernel-init
  when: ansible_os_family in ['RedHat', 'Rocky', 'AlmaLinux']

- name: stop agent and remove old vrouter if kernel-init version changed
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'
  block:
    - name: check /etc/contrail/vrouter/docker-compose.yaml
      stat:
        path: /etc/contrail/vrouter/docker-compose.yaml
      register: st
    - name: compare kernel-init images and stop agent with vrouter unload
      when: st.stat.exists is defined and st.stat.exists
      block:
        - name: load current vrouter compose file
          command: cat /etc/contrail/vrouter/docker-compose.yaml
          register: raw_config
          ignore_errors: yes
        - name: parse current vrouter compose file
          set_fact:
            current_config: "{{ raw_config.stdout | from_yaml }}"
          when: raw_config.stdout is defined
          ignore_errors: yes
        - set_fact:
            new_kernel_init_image: "{{ container_registry }}/{{ vrouter_kernel_init_img_name }}:{{ contrail_version_tag }}"
        - name: stop vrouter agent and unload vrouter driver
          include: stop.yml
          when:
            - current_config is defined
            - current_config.services is defined
            - current_config.services["vrouter-kernel-init"] is defined
            - current_config.services["vrouter-kernel-init"].image is defined
            - current_config.services["vrouter-kernel-init"].image != new_kernel_init_image

- name: create contrail vrouter compose file
  template:
    src: contrail-vrouter.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: "create /var/run/contrail/loadbalancer"
  file:
    path: /var/run/contrail/loadbalancer
    state: directory
    recurse: yes

- name: "start contrail vrouter"
  docker_compose:
    project_src: /etc/contrail/vrouter
  environment:
    DOCKER_CLIENT_TIMEOUT: '120'
    COMPOSE_HTTP_TIMEOUT: '120'
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: "Set variables for DPDK plugins"
  set_fact:
    plugin_os: "{{ 'ubuntu' if (ansible_os_family == 'Debian') else 'redhat' }}"
    mellanox: "{{ true if (roles[instance_name].vrouter.DPDK_UIO_DRIVER is defined
                  and roles[instance_name].vrouter.DPDK_UIO_DRIVER == 'mlnx') else false }}"
    n3000: "{{ true if (roles[instance_name].vrouter.DPDK_UIO_DRIVER is defined
                  and roles[instance_name].vrouter.DPDK_UIO_DRIVER == 'n3000') else false }}"

- name: "create contrail dpdk vrouter compose file"
  template:
    src: contrail-vrouter-dpdk.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "start contrail dpdk vrouter"
  docker_compose:
    project_src: /etc/contrail/vrouter
  environment:
    DOCKER_CLIENT_TIMEOUT: '120'
    COMPOSE_HTTP_TIMEOUT: '120'
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "Restart nova-compute"
  shell: "docker restart nova_compute"
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'
  ignore_errors: yes
