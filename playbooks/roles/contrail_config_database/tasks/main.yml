---
- name: create /etc/contrail/config_database
  file:
    path: /etc/contrail/config_database
    state: directory
    recurse: yes

- name: set cassandra seeds to CONFIGDB_NODES if defined
  set_fact:
    cassandra_seeds: "{{ contrail_configuration.CONFIGDB_NODES }}"
  when: contrail_configuration.CONFIGDB_NODES is defined

- name: set cassandra seeds to CONTROLLER_NODES if CONFIGDB_NODES not defined
  set_fact:
    cassandra_seeds: "{{ contrail_configuration.CONTROLLER_NODES }}"
  when: contrail_configuration.CONTROLLER_NODES is defined and contrail_configuration.CONFIGDB_NODES is undefined

- name: set zookeeper nodes to CONFIGDB_NODES if defined
  set_fact:
    zookeeper_nodes: "{{ contrail_configuration.CONFIGDB_NODES }}"
  when: contrail_configuration.CONFIGDB_NODES is defined

- name: set zookeeper nodes to CONTROLLER_NODES if CONFIGDB_NODES not defined
  set_fact:
    zookeeper_nodes: "{{ contrail_configuration.CONTROLLER_NODES }}"
  when: contrail_configuration.CONTROLLER_NODES is defined and contrail_configuration.CONFIGDB_NODES is undefined

- name: set rabbit nodes to RABBITMQ_NODES if defined
  set_fact:
    rabbitmq_nodes: "{{ contrail_configuration.RABBITMQ_NODES }}"
  when: contrail_configuration.RABBITMQ_NODES is defined

- name: set rabbit nodes to CONFIGDB_NODES if defined
  set_fact:
    rabbitmq_nodes: "{{ contrail_configuration.CONFIGDB_NODES }}"
  when: contrail_configuration.CONFIGDB_NODES is defined and rabbitmq_nodes is undefined


- name: set rabbit nodes to CONTROLLER_NODES if CONFIGDB_NODES not defined
  set_fact:
    rabbitmq_nodes: "{{ contrail_configuration.CONTROLLER_NODES }}"
  when: contrail_configuration.CONTROLLER_NODES is defined and rabbitmq_nodes is undefined

- name: "Set variables for reaper tool"
  set_fact:
    reaper_enabled: contrail_configuration.CASSANDRA_REAPER_ENABLED | default(true)

- name: "get /etc/contrail/common_config_database.env stat"
  stat:
    path: "/etc/contrail/common_config_database.env"
  register: st

- name: "delete /etc/contrail/common_config_database.env if exists"
  file:
    path: "/etc/contrail/common_config_database.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_config_database.env"
  file:
    path: "/etc/contrail/common_config_database.env"
    mode: "0640"
    state: touch

- name: "populate global common_config_database.env"
  lineinfile: dest=/etc/contrail/common_config_database.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  no_log: True

- name: "populate instance specific common_config_database.env"
  lineinfile: dest=/etc/contrail/common_config_database.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ instances[instance_name].contrail_configuration }}"
  when: instances[instance_name].contrail_configuration is defined
  ignore_errors: yes
  no_log: True

- name: "populate pod specific common_config_database.env"
  lineinfile: dest=/etc/contrail/common_config_database.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[instance_name].config_database | default ({}) }}"
  when: roles[instance_name].config_database is defined
  ignore_errors: yes
  no_log: True

- name: create contrail config database compose file
  template:
    src: contrail-config-database.yaml.j2
    dest: /etc/contrail/config_database/docker-compose.yaml

- name: start contrail config database
  docker_compose:
    project_src: /etc/contrail/config_database
  environment:
    DOCKER_CLIENT_TIMEOUT: '120'
    COMPOSE_HTTP_TIMEOUT: '120'
